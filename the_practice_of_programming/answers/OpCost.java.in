import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Date;

class AClass {
	public void fn()
	{
	}
}

class BClass extends AClass {
}

#define TIME_SETUP(pre, expr, post) \
{ \
	Date start, end; \
	{ pre; } \
	start = new Date(); \
	for (int _i = 0; _i < NUM_ITERATIONS; _i++) { \
		expr; \
	} \
	end = new Date(); \
	{ post; } \
	System.out.print("  "); \
	System.out.print(#expr); \
	for (int _i = 0; _i < 32 - #expr.length(); _i++) \
		System.out.print(" "); \
	System.out.println(timeFormat.format(nanos(start, end) - cal)); \
}

#define TIME(expr) TIME_SETUP(, expr, )

public class OpCost {
	static final int NUM_ITERATIONS = 500000;
	static DecimalFormat timeFormat = new DecimalFormat("##.000000");
	static double cal = 0.0;

	public static void main(String[] args)
	{
		AClass a = new AClass();
		BClass b = new BClass();
		int[] array;
		ArrayList al;
		LinkedList ll;
		Object o;
		calibrate();
		System.out.print("Calibration: ");
		System.out.println(timeFormat.format(cal));

		System.out.println();
		System.out.println("Object Operations");
		TIME(a = new AClass())
		TIME(b = new BClass())
		TIME(a = b)
		TIME(array = new int[10])

		System.out.println();
		System.out.println("Method Calls");
		a = new AClass();
		b = new BClass();
		TIME(a.fn())
		TIME(b.fn())

		System.out.println();
		System.out.println("Containers");
		al = new ArrayList();
		ll = new LinkedList();
		TIME(al = new ArrayList())
		TIME(o = al.clone())
		TIME(ll = new LinkedList())
		TIME(o = ll.clone())
	}

	private static void calibrate()
	{
		Date start, end;
		start = new Date();
		for (int i = 0; i < NUM_ITERATIONS; i++)
			;
		end = new Date();
		cal = nanos(start, end);
	}

	private static double nanos(Date start, Date end)
	{
		return ((double) end.getTime() - start.getTime()) * 1000.0 / NUM_ITERATIONS;
	}
}
